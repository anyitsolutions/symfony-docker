name: 'Staging'

# Событие workflow_run позволяет запускать workflow после завершения другого workflow.
#on:
#  workflow_run:
#    workflows: ["Test"]
#    branches: [main]
#    types:
#      - completed
on: workflow_dispatch # Событие workflow_dispatch позволяет запускать workflow вручную из интерфейса GitHub.

# Набор заданий в рабочем процессе
jobs:
  # Задание сборки образа
  build:
    # Виртуальная машина, на которой будет выполняться задание
    runs-on: ubuntu-latest
    # Запускать задание только на главной ветке
    if: github.ref == 'refs/heads/main'
    # Набор шагов в задании
    steps:
      # экшен для извлечения репозитория
      - name: "Checkout repository"
        uses: actions/checkout@v2

      # надстройка для виртуализации
      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1

      # модуль Docker для сборки образов
      - name: "Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1

      # экшен для логина в Docker Registry (в нашем случае – Github Packages)
      - name: "Login to GitHub Registry"
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: "alejandro-yakovlev"
          password: ${{ secrets.REGISTRY_TOKEN }}

      # экшен сборки и публикации образа
      - name: "Push images to GitHub Container Registry"
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./docker/php-fpm/Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/test-ci-cd:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/test-ci-cd:latest
          build-args: |
            BUILD_MODE=production
  # Задание деплоя
  deploy:
    runs-on: ubuntu-latest
    # Запускать задание только после успешного выполнения задания build
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      # экшен для инициализации подключения по SSH и выполнения скрипта
      - name: "Run deploy on server"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo '${{ secrets.PROD_ENV }}' > /var/www/symfony/.env.local
            docker pull ghcr.io/${{ github.repository_owner }}/test-ci-cd:latest
            docker stop symfony || true
            docker rm -v symfony || true
            docker run --env-file /var/www/symfony/.env.local --name symfony -d --restart always -p 880:8080 ghcr.io/${{ github.repository_owner }}/test-ci-cd:latest